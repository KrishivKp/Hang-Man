import tkinter as tk
from tkinter import messagebox

class HangmanGame:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("Futuristic Hangman")
        self.window.geometry("600x500")
        self.window.configure(bg="#1abc9c")

        # Game variables
        self.word_list = ["futuristic", "python", "interface", "hangman", "technology"]
        self.word_to_guess = ""
        self.guessed_letters = []
        self.remaining_attempts = 6

        # UI Elements
        self.title_label = tk.Label(
            self.window,
            text="Hangman",
            font=("Arial", 30, "bold"),
            bg="#1abc9c",
            fg="#ecf0f1",
        )
        self.title_label.pack(pady=10)

        self.canvas = tk.Canvas(self.window, width=400, height=300, bg="#16a085", highlightthickness=0)
        self.canvas.pack(pady=20)

        self.word_display = tk.Label(
            self.window,
            text="",
            font=("Courier", 20, "bold"),
            bg="#1abc9c",
            fg="#ffffff",
        )
        self.word_display.pack(pady=10)

        self.input_frame = tk.Frame(self.window, bg="#1abc9c")
        self.input_frame.pack(pady=20)

        self.letter_entry = tk.Entry(self.input_frame, font=("Arial", 16), width=5, justify="center")
        self.letter_entry.grid(row=0, column=0, padx=5)

        self.submit_button = tk.Button(
            self.input_frame,
            text="Guess",
            font=("Arial", 14),
            command=self.make_guess,
            bg="#e74c3c",
            fg="#ffffff",
            activebackground="#c0392b",
        )
        self.submit_button.grid(row=0, column=1, padx=5)

        self.reset_button = tk.Button(
            self.window,
            text="Restart",
            font=("Arial", 14),
            command=self.start_game,
            bg="#3498db",
            fg="#ffffff",
            activebackground="#2980b9",
        )
        self.reset_button.pack(pady=10)

        self.status_label = tk.Label(
            self.window,
            text="",
            font=("Arial", 14),
            bg="#1abc9c",
            fg="#ecf0f1",
        )
        self.status_label.pack(pady=10)

        self.start_game()

    def start_game(self):
        """Initialize or restart the game."""
        import random
        self.word_to_guess = random.choice(self.word_list).upper()
        self.guessed_letters = []
        self.remaining_attempts = 6
        self.update_word_display()
        self.update_hangman()
        self.status_label.config(text="Guess a letter!")
        self.letter_entry.delete(0, tk.END)

    def update_word_display(self):
        """Update the display of the word with guessed letters."""
        display_text = " ".join(
            [letter if letter in self.guessed_letters else "_" for letter in self.word_to_guess]
        )
        self.word_display.config(text=display_text)

    def make_guess(self):
        """Handle a letter guess."""
        letter = self.letter_entry.get().upper()
        if not letter.isalpha() or len(letter) != 1:
            self.status_label.config(text="Please enter a valid single letter.")
            return

        if letter in self.guessed_letters:
            self.status_label.config(text="You already guessed that letter.")
            return

        self.guessed_letters.append(letter)

        if letter in self.word_to_guess:
            self.status_label.config(text=f"Good job! {letter} is in the word.")
        else:
            self.remaining_attempts -= 1
            self.status_label.config(text=f"Sorry! {letter} is not in the word.")

        self.update_word_display()
        self.update_hangman()
        self.check_game_over()
        self.letter_entry.delete(0, tk.END)

    def update_hangman(self):
        """Update the hangman drawing based on remaining attempts."""
        self.canvas.delete("all")
        base_color = "#ecf0f1"

        if self.remaining_attempts <= 5:
            self.canvas.create_line(50, 250, 150, 250, fill=base_color, width=4)  # Base
        if self.remaining_attempts <= 4:
            self.canvas.create_line(100, 250, 100, 50, fill=base_color, width=4)  # Pole
        if self.remaining_attempts <= 3:
            self.canvas.create_line(100, 50, 200, 50, fill=base_color, width=4)  # Beam
        if self.remaining_attempts <= 2:
            self.canvas.create_line(200, 50, 200, 100, fill=base_color, width=4)  # Rope
        if self.remaining_attempts <= 1:
            self.canvas.create_oval(180, 100, 220, 140, outline=base_color, width=4)  # Head
        if self.remaining_attempts == 0:
            self.canvas.create_line(200, 140, 200, 200, fill=base_color, width=4)  # Body
            self.canvas.create_line(200, 160, 180, 180, fill=base_color, width=4)  # Left Arm
            self.canvas.create_line(200, 160, 220, 180, fill=base_color, width=4)  # Right Arm
            self.canvas.create_line(200, 200, 180, 230, fill=base_color, width=4)  # Left Leg
            self.canvas.create_line(200, 200, 220, 230, fill=base_color, width=4)  # Right Leg

    def check_game_over(self):
        """Check if the game is over due to win or loss."""
        if "_" not in self.word_display.cget("text"):
            messagebox.showinfo("Congratulations!", "You guessed the word!")
            self.start_game()
        elif self.remaining_attempts == 0:
            messagebox.showinfo("Game Over", f"You lost! The word was {self.word_to_guess}.")
            self.start_game()

    def run(self):
        """Run the main game loop."""
        self.window.mainloop()

if __name__ == "__main__":
    game = HangmanGame()
    game.run()
